@startuml
'https://plantuml.com/class-diagram


legend top
    | Couleur  | Signification  |
    |<#Blue>|  Agr√©gation |
    |<#Green>|  Composition  |
    |<#Red>|  Extension  |
end legend


class Bishop
{
    + <<Create>> Bishop(couleur : Color)
    + getLegalMoves(tiles : Tile[][], posX : int, posY : int) : List<Tile>
}

class Board
{
    - tiles : Tile[][]
    - pf : PieceFactory
    - blackKing : King
    - whiteKing : King
    - selectedTile : Tile
    + <<Create>> Board()
    - initTiles()
    - initPieces()
    + clickedOnTile(posX : int, posY : int, colorCurrentPlayer : Color) : Move
    - changeSelectedTile(tileClicked : Tile)
    - kingIsChecked(king : King) : boolean
    + isKingChecked(color : Color) : boolean
    + KingIsCheckedMate(king : King) : boolean
    + isKingCheckedMate(color : Color) : boolean
    + simulateMove(src: Tile, dest : Tile)
    + canMoveTo(src : Tile, dest : Tile) : boolean
    + tileIsEmpty(tile : Tile) : boolean
    + move(destX : int, destY : int, colorCurrentPlayer : Color) : Move
    + upgradePawn(type : String, color : Color, x : int, y : int)
    - getKingTile(king : King) : Tile
    + getSelectedTile() : Tile
    + getTiles() : Tile[][]
}

Enum Color
{
    BLACK,
    WHITE
}

class Game
{
    - board : Board
    - whitePlayer : Player
    - blackPlayer : Player
    - currentPlayer : Player
    - observer : IModelObserver
    + <<Create>> Game(whitePlayerName : String, blackPlayerName : String)
    + gameStarted(whiteName : String, blackName : String)
    + tileClicked(posX : int, posY : int)
    + nextPlayer()
    + upgradePawnTo(type : Stirng, color : Color, x : int, y : int)
    - notifyGameStarted()
    - notifyTileSelected(tile : Tile)
    - notifyMovedPiece(move : Move)
    - notifyKingStatus(whiteKingIsChecked : boolean, blackKingIsChecked : boolean)
    - notifyKingCheckedMate(whiteKingIsCheckedMate : boolean, blackKingIsCheckedMate : boolean)
    - notifyUpgradePawnDialog(x : int, y : int)
    - notifyUpgradePawn(type : String, x : int, y : int)
    + setObserver(observer : IModelObserver)
    + getWhitePlayerName() : String
    + getBlackPlayerName() : String
}

class King
{
    - isChecked : boolean
    - isCheckedMate : boolean
    + <<Create>> King(couleur : Color)
    + getLegalMoves(tiles : Tile[][], posX : int, posY : int) : List<Tile>
    + getIsChecked() : boolean
    + getIsCheckedMate() : boolean
    + setChecked(isChecked : boolean)
}

class Knight
{
    + <<Create>> Knight(couleur : Color)
    + getLegalMoves(tiles : Tile[][], posX : int, posY : int) : List<Tile>
}

class Move
{
    - prevX : int
    - prevY : int
    - destX : int
    - destY : int
    - pieceToRemove : Piece
    - upgradePawn : boolean
    + <<Create>> Move(prevX : int, prevY : int, destX : int, destY : int, pieceToRemove : Piece, upgradePawn : boolean)
    + getPrevX() : int
    + getPrevY() : int
    + getDestX() : int
    + getDestY() : int
    + getPieceToRemove() : Piece
    + getUpgradePawn() : boolean
}

class Pawn
{
    - moved : boolean = false
    + <<Create>> Pawn(couleur : Color)
    + getLegalMoves(tiles : Tile[][], posX : int, posY : int) : List<Tile>
    + setIsMoved(moved : boolean)
    + getIsMoved() : boolean
}

abstract class Piece
{
    # color : Color
    + getColor() : Color
    + getLegalMoves(tiles : Tile[][], posX : int, posY : int) : List<Tile>
    + getDiagonalLegalMoves(tiles : Tile[][], posX : int, posY : int) : List<Tile>
    + getHorizontalLegalMoves(tiles : Tile[][], posX : int, posY : int) : List<Tile>
}

class PieceFactory
{
    + <<Create>> PieceFactory()
    + createRook(couleur : Color) : <<Create>> Rook(couleur : Color)
    + createKnight(couleur : Color) : <<Create>> Knight(couleur : Color)
    + createBishop(couleur : Color) : <<Create>> Bishop(couleur : Color)
    + createQueen(couleur : Color) :  <<Create>> Queen(couleur : Color)
    + createKing(couleur : Color) :  <<Create>> King(couleur : Color)
    + createPawn(couleur : Color) :  <<Create>> Pawn(couleur : Color)
}


class Player
{
    - namePlayer : String
    - lostPieces : List<Piece>
    - colorOfPieces : Color
    - played : boolean = false
    + <<Create>> Player(name : String, colorOfPieces : Color)
    + getPlayerName() : String
    + addLostPiece(piece : Piece)
    + getColorOfPieces() : Color
}

class Queen
{
    + <<Create>> Queen(couleur : Color)
    + getLegalMoves(tiles : Tile[][], posX : int, posY : int) : List<Tile>
}

class Rook
{
   + <<Create>> Rook(couleur : Color)
   + getLegalMoves(tiles : Tile[][], posX : int, posY : int) : List<Tile>
}

class Tile
{
    - piece : Piece
    - posX : int
    - posY : int
    - isClicked : boolean = false
    + <<Create>> Tile(i :int, j : int)
    + isOccupied() : boolean
    + setPiece(piece : Piece)
    + getIsClicked() : boolean
    + setIsClicked(isClicked : boolean)
    + getPiece() : Piece
    + getPosX() : int
    + getPosY() : int
    + setPosX(posX : int)
    + setPosY(posY : int)
}

Bishop --|> Piece #line:Red
Bishop o--> "use 1 " Color #line:Blue

Board *--> "use" Tile #line:Green
Board *--> "use" PieceFactory #line:Green
Board *--> "use" King #line:Green
Board *--> "use" Move #line:Green

Game --|> "use" Tile #line:Green
Game *--> "use" Board #line:Green
Game *--> "use" Player #line:Green
Game o--> "use 1 " Color #line:Blue


King --|> Piece #line:Red
King o--> "use 1 " Color #line:Blue

Knight --|> Piece #line:Red
Knight o--> "use 1 " Color #line:Blue

Move --|> Piece #line:Red

Pawn --|> Piece #line:Red
Pawn o--> "use 1 " Color #line:Blue

PieceFactory *--> "use" Piece #line:Green
PieceFactory *--> "use" Rook #line:Green
PieceFactory *--> "use" Knight #line:Green
PieceFactory *--> "use" Bishop #line:Green
PieceFactory *--> "use" Queen #line:Green
PieceFactory *--> "use" King #line:Green
PieceFactory *--> "use" Pawn #line:Green

Player o--> "use 1 " Color #line:Blue
Player *--> "play with 16" Piece #line:Green

Queen --|> Piece #line:Red
Queen o--> "use 1 " Color #line:Blue

Rook --|> Piece #line:Red
Rook o--> "use 1 " Color #line:Blue

Tile *--> "use" Piece #line:Green

@enduml