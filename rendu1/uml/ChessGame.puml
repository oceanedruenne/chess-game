@startuml
'https://plantuml.com/class-diagram
class ChessGameSingleton {
    - chessGame : ChessGameSingleton
    - ChessGameSingleton()
    + getInstanceChessGame() : ChessGame
}

abstract class ChessGame
{
     + frame : JFrame
     + players : List<Player>
     + ChessGame(frame : JFrame, listPlayers : List<Player>)
}

class Player {
    + namePlayer : String
    + pieceList : List<Piece>
    + nbPieces = 16 : Integer
    + colorOfPiece : String
    + score = 0 : Integer
    + Player(name : String,pieceList : List<Piece>,color : String)
}

interface IAbstractPiece {
    + changePosition(posX : String, posY : Integer)
}

abstract class Piece
{
    + posX : String
    + posY : Integer
    + <<Create>> Piece(posX : String, posY : Integer)
    + changePosition(posX : String, posY : Integer)
}

class PieceFactory
{
    + <<Create>> PieceFactory()
    + createRook(posX : String, posY : Integer) : Rook
    + createKnight(posX : String, posY : Integer) : Knight
    + createBishop(posX : String, posY : Integer) : Bishop
    + createQueen(posX : String, posY : Integer) : Queen
    + createKing(posX : String, posY : Integer) : King
    + createPawn(posX : String, posY : Integer) : Pawn
}

class Rook
{
   + posX : String
   + posY : Integer
   + Rook()
   + changePosition(posX : String, posY : Integer)
}

class Knight
{
    + posX : String
    + posY : Integer
    + Knight()
    + changePosition(posX : String, posY : Integer)
}

class Bishop
{
    + posX : String
    + posY : Integer
    + Bishop()
    + changePosition(posX : String, posY : Integer)
}

class Queen
{
    + posX : String
    + posY : Integer
    + Queen()
    + changePosition(posX : String, posY : Integer)
}

class King
{
    + posX : String
    + posY : Integer
    + King()
    + changePosition(posX : String, posY : Integer)
}

class Pawn
{
    + posX : String
    + posY : Integer
    + Pawn()
    + changePosition(posX : String, posY : Integer)
}

Piece -.> "implements" Piece
Piece -.> "use" PieceFactory
PieceFactory -.> "use" Piece
PieceFactory -.> "use" Rook
PieceFactory -.> "use" Knight
PieceFactory -.> "use" Bishop
PieceFactory -.> "use" Queen
PieceFactory -.> "use" King
PieceFactory -.> "use" Pawn

Rook --|> Piece
Knight --|> Piece
Bishop --|> Piece
Queen --|> Piece
King --|> Piece
Pawn --|> Piece

ChessGame *--> "play to  2 players" Player
Player *--> "play with 16" Piece
ChessGameSingleton *--> "extends" ChessGame


@enduml