@startuml
'https://plantuml.com/class-diagram

class Player {
    + namePlayer : String
    + lostPieces : List<Piece>
    + colorOfPiece : Color
    + <<Create>> Player(name : String, color : Color)
}


abstract class Piece
{
    + <<Create>> Piece(posX : Integer, posY : Integer)
    + getLegalMoves(tiles : Tile[][], posX : Integer, posY : Integer) : List<Tile>
}

class PieceFactory
{
    + <<Create>> PieceFactory()
    + createRook(posX : Integer, posY : Integer) : Rook
    + createKnight(posX : Integer, posY : Integer) : Knight
    + createBishop(posX : Integer, posY : Integer) : Bishop
    + createQueen(posX : Integer, posY : Integer) : Queen
    + createKing(posX : Integer, posY : Integer) : King
    + createPawn(posX : Integer, posY : Integer) : Pawn
}

class Tile
{
    - piece : Piece
    - posX : Integer
    - posY : Integer
    + <<Create>> Tile(piece : Piece)
    + isOccuped() : Boolean
    + setPiece(piece : Piece)
    + getPiece() : Piece
}

class Board
{
    - tiles : Tile[][]
    - pf : PieceFactory
    + <<Create>> Board()
    + initPieces()
}

class Rook
{
   - color : Color
   + Rook()
   + getLegalMoves(tiles : Tile[][], posX : Integer, posY : Integer) : List<Tile>
}

class Knight
{
    - color : Color
    + Knight()
     + getLegalMoves(tiles : Tile[][], posX : Integer, posY : Integer) : List<Tile>
}

class Bishop
{
    - color : Color
    + Bishop()
     + getLegalMoves(tiles : Tile[][], posX : Integer, posY : Integer) : List<Tile>
}

class Queen
{
    - color : Color
    + Queen()
     + getLegalMoves(tiles : Tile[][], posX : Integer, posY : Integer) : List<Tile>
}

class King
{
    - color : Color
    + King()
     + getLegalMoves(tiles : Tile[][], posX : Integer, posY : Integer) : List<Tile>
}

class Pawn
{
    - color : Color
    + Pawn()
     + getLegalMoves(tiles : Tile[][], posX : Integer, posY : Integer) : List<Tile>
}

Enum Color
{
    BLACK,
    WHITE
}

Piece -.> "implements" Piece
Piece -.> "use" PieceFactory
PieceFactory -.> "use" Piece
PieceFactory -.> "use" Rook
PieceFactory -.> "use" Knight
PieceFactory -.> "use" Bishop
PieceFactory -.> "use" Queen
PieceFactory -.> "use" King
PieceFactory -.> "use" Pawn

Rook --|> Piece
Knight --|> Piece
Bishop --|> Piece
Queen --|> Piece
King --|> Piece
Pawn --|> Piece

Rook -.> "use" Color
Knight -.> "use" Color
Bishop -.> "use" Color
Queen -.> "use"  Color
King -.> "use" Color
Pawn -.> "use"  Color
Player -.> "use" Color

Board -.> "use" Tile
Board -.> "use" PieceFactory

Tile -.> "use" Piece

Player *--> "play with 16" Piece


@enduml