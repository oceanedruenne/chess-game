@startuml
'https://plantuml.com/class-diagram

class Player {
    - namePlayer : String
    - lostPieces : List<Piece>
    - colorOfPiece : Color
    - played : Boolean
    + <<Create>> Player(name : String, color : Color)
    + getPlayerName() : String
    + getLostPieces() : List<Piece>
    + removeLostPieces(piece : Piece)
    + getColorPieces() : Color
}


abstract class Piece
{
    + <<Create>> Piece(posX : Integer, posY : Integer)
    + getLegalMoves(tiles : Tile[][], posX : Integer, posY : Integer) : List<Tile>
}

class PieceFactory
{
    + <<Create>> PieceFactory()
    + createRook(posX : Integer, posY : Integer) : Rook
    + createKnight(posX : Integer, posY : Integer) : Knight
    + createBishop(posX : Integer, posY : Integer) : Bishop
    + createQueen(posX : Integer, posY : Integer) : Queen
    + createKing(posX : Integer, posY : Integer) : King
    + createPawn(posX : Integer, posY : Integer) : Pawn
}

class Tile
{
    - piece : Piece
    - posX : Integer
    - posY : Integer
    - isClicked : Boolean
    + <<Create>> Tile(piece : Piece)
    + isOccuped() : Boolean
    + setPiece(piece : Piece)
<<<<<<< HEAD
    + getIsClicked() : Boolean
    + setIsClicked(posX : Integer, posY : Integer)
    + unsetIsClicked(posX : Integer, posY : Integer)
    + getPieceType(posX : Integer, posY : Integer) : Piece
=======
    + getPiece() : Piece
>>>>>>> 4a8f132a6af20a8bbddcfccb9f7f7242cd186853
}

class Board
{
    - tiles : Tile[][]
    - pf : PieceFactory
    + <<Create>> Board()
    + initPieces()
    + clickedOnTile(posX : Integer, posY : Integer)
    + getTile(posX : Integer, posY : Integer)
    + clickedOnTile(posX : Integer, posY : Integer)
    + unclickedOnTile(posX : Integer, posY : Integer)
}

class Rook
{
   - color : Color
   + <<Create>> Rook()
   + getLegalMoves(tiles : Tile[][], posX : Integer, posY : Integer) : List<Tile>
}

class Knight
{
    - color : Color
    + <<Create>> Knight()
    + getLegalMoves(tiles : Tile[][], posX : Integer, posY : Integer) : List<Tile>
}

class Bishop
{
    - color : Color
    + <<Create>> Bishop()
    + getLegalMoves(tiles : Tile[][], posX : Integer, posY : Integer) : List<Tile>
}

class Queen
{
    - color : Color
    + <<Create>> Queen()
    + getLegalMoves(tiles : Tile[][], posX : Integer, posY : Integer) : List<Tile>
}

class King
{
    - color : Color
    - isThreatened : Boolean
    - isBlocked : Boolean
    + <<Create>> King()
    + getLegalMoves(tiles : Tile[][], posX : Integer, posY : Integer) : List<Tile>
}

class Pawn
{
    - color : Color
    + <<Create>> Pawn()
    + getLegalMoves(tiles : Tile[][], posX : Integer, posY : Integer) : List<Tile>
}

Enum Color
{
    BLACK,
    WHITE
}

class Game
{
    - board : Board
    - players : List<Player>
    - currentPlayer : Player
    + <<Create>> Game(board : Board, whitePlayer : Player, blackPlayer : Player)
    + tileClicked(posX : Integer, posY : Integer)
    + tileUnclicked(posX : Integer, posY : Integer)
    + getNextPlayer(currentPlayer : Player)
    + nextRound()
    + kingIsThreatened()
    + KingIsBlocked()
    + checkMate()

}
Piece -.> "implements" Piece
Piece -.> "use" PieceFactory
PieceFactory -.> "use" Piece
PieceFactory -.> "use" Rook
PieceFactory -.> "use" Knight
PieceFactory -.> "use" Bishop
PieceFactory -.> "use" Queen
PieceFactory -.> "use" King
PieceFactory -.> "use" Pawn

Game -.> "use" Board
Game -.> "use" Player

Rook --|> Piece
Knight --|> Piece
Bishop --|> Piece
Queen --|> Piece
King --|> Piece
Pawn --|> Piece

Rook -.> "use" Color
Knight -.> "use" Color
Bishop -.> "use" Color
Queen -.> "use"  Color
King -.> "use" Color
Pawn -.> "use"  Color
Player -.> "use" Color

Board -.> "use" Tile
Board -.> "use" PieceFactory

Tile -.> "use" Piece

Player *--> "play with 16" Piece


@enduml